# -*- coding:utf-8 -*-import datetimefrom feature_extraction import ChiSquarefrom tools import get_accuracyfrom tools import Write2Fileclass Test:    def __init__(self, train_num, test_num, feature_num, max_iter, C, corpus):        self.train_num = train_num        self.test_num = test_num        self.feature_num = feature_num        self.max_iter = max_iter        self.C = C        self.parameters = [train_num, test_num, feature_num]        # get the f_corpus        self.train_data, self.train_labels = corpus.get_train_corpus(train_num)        self.test_data, self.test_labels = corpus.get_test_corpus(test_num)        # feature extraction        fe = ChiSquare(self.train_data, self.train_labels)        self.best_words = fe.best_words(feature_num)        self.single_classifiers_got = False        self.precisions = [[0, 0],                           [0,0],# bayes                           [0, 0]]  # svm    def set_precisions(self, precisions):        self.precisions = precisions    def write(self, filepath, classify_labels, i=-1):        results = get_accuracy(self.test_labels, classify_labels, self.parameters)        if i >= 0:            self.precisions[i][0] = results[10][1] / 100            self.precisions[i][1] = results[7][1] / 100        Write2File.write_contents(filepath, results)    def test_svm(self):        print("SVMClassifier")        print("---" * 45)        print("Train num = %s" % self.train_num)        print("Test num = %s" % self.test_num)        print("C = %s" % self.C)        from classifiers import SVMClassifier        svm = SVMClassifier(self.train_data, self.train_labels, self.best_words, self.C)        classify_labels = []        print("SVMClassifier is testing ...")        for data in self.test_data:            classify_labels.append(svm.classify(data))        print("SVMClassifier tests over.")        filepath = "f_runout/SVM-train-%d-test-%d-f-%d-C-%d-%s-lin.xls" % \                   (self.train_num, self.test_num,                    self.feature_num, self.C,                    datetime.datetime.now().strftime(                        "%Y-%m-%d-%H-%M-%S"))        self.write(filepath, classify_labels, 2)def test_result():    from corpus import HotelCorpus    type_ = "hotel"    train_num = 2200    test_num = 800    feature_num = 5000    max_iter = 500    C = 150    corpus = HotelCorpus()    test = Test(train_num, test_num, feature_num, max_iter, C,  corpus)    test.test_svm()if __name__ == "__main__":    pass    test_result()